% Auto-generated by cameraCalibrator app on 12-Sep-2019
%-------------------------------------------------------


% Define images to process
    imageFileNames = {'E:\study\2019FALL\WeeklyReport\11.8\cameraCalibration\OriginalPics\IPhone15mm\IMG_1450.JPG',...
    'E:\study\2019FALL\WeeklyReport\11.8\cameraCalibration\OriginalPics\IPhone15mm\IMG_1451.JPG',...
    'E:\study\2019FALL\WeeklyReport\11.8\cameraCalibration\OriginalPics\IPhone15mm\IMG_1452.JPG',...
     'E:\study\2019FALL\WeeklyReport\11.8\cameraCalibration\OriginalPics\IPhone15mm\IMG_1453.JPG',...
    'E:\study\2019FALL\WeeklyReport\11.8\cameraCalibration\OriginalPics\IPhone15mm\IMG_1454.JPG',...
     'E:\study\2019FALL\WeeklyReport\11.8\cameraCalibration\OriginalPics\IPhone15mm\IMG_1455.JPG',...
    'E:\study\2019FALL\WeeklyReport\11.8\cameraCalibration\OriginalPics\IPhone15mm\IMG_1456.JPG',...
     'E:\study\2019FALL\WeeklyReport\11.8\cameraCalibration\OriginalPics\IPhone15mm\IMG_1457.JPG',...
    'E:\study\2019FALL\WeeklyReport\11.8\cameraCalibration\OriginalPics\IPhone15mm\IMG_1458.JPG',...
     'E:\study\2019FALL\WeeklyReport\11.8\cameraCalibration\OriginalPics\IPhone15mm\IMG_1459.JPG',...
    'E:\study\2019FALL\WeeklyReport\11.8\cameraCalibration\OriginalPics\IPhone15mm\IMG_1464.JPG',...
   
    };
% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 15;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
% % case1  Radial parameters 2, tangential 0
% [cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
%     'EstimateSkew', true, 'EstimateTangentialDistortion', false, ...
%     'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
%     'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
%     'ImageSize', [mrows, ncols]);

% % Case 2 Radial parameters 3, tangential 0
% [cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
%     'EstimateSkew', true, 'EstimateTangentialDistortion', false, ...
%     'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
%     'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
%     'ImageSize', [mrows, ncols]);

% % Case 3 Radial parameter 2 tangential 2
% [cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
%     'EstimateSkew', true, 'EstimateTangentialDistortion', true, ...
%     'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
%     'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
%     'ImageSize', [mrows, ncols]);

% Case 4 Radial parameter 3 tangential 2
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', true, 'EstimateTangentialDistortion', true, ...
    'NumRadialDistortionCoefficients', 3, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% % Case 5 Radial parameter 3 tangential 2 not skew
% [cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
%     'EstimateSkew', false, 'EstimateTangentialDistortion', true, ...
%     'NumRadialDistortionCoefficients', 3, 'WorldUnits', 'millimeters', ...
%     'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
%     'ImageSize', [mrows, ncols]);

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
undistortedImage = undistortImage(originalImage, cameraParams);
% 
% %% get undistorted points
% i = 10
% undistortedPoints_1 = undistortPoints(imagePoints(:,:,i),cameraParams);
% imagePoints_1=imagePoints(:,:,1);
% X = undistortedPoints_1;
% y = imagePoints_1(:,2);
% figure(3)
% p1 = scatter(undistortedPoints_1(:,1),undistortedPoints_1(:,2),'Marker','o','LineWidth',2);
% hold on
% p2 = scatter(imagePoints(:,1,i), imagePoints(:,2,i),'Marker','*','LineWidth',1);
% xlabel('X','FontSize',12,'FontWeight','bold');
% ylabel('Y','FontSize',12,'FontWeight','bold');
% legend([p1  p2],{'Original','Toolbox'}, 'Location','northeast','FontSize',12)
% title('Case 5', 'FontSize',14)
% figure(4)
%  quiver(worldPoints(:,1),worldPoints(:,2),imagePoints_1(:,1)- undistortedPoints_1(:,1),imagePoints_1(:,2)- undistortedPoints_1(:,2))
% xlabel('X','FontSize',12,'FontWeight','bold');
% ylabel('Y','FontSize',12,'FontWeight','bold');
%  title('Case 5')

